---
AWSTemplateFormatVersion: '2010-09-09'

Description: Chef Automate Deployment Template - Version 0.1.1

## PARAMETERS SECTION ##

Parameters:

  Version:
    Description: Version of the automate-demo.json file
    Type: String
    Default: 0.1.1

  # SSH keypair to inject into the instances
  KeyName:
    Description: Name of an existing ec2 KeyPair to enable SSH access
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

## AMIs START ##

  zCurrentUbuntu:
    Type: String
    Default: ami-405f7226
    Description: AMI ID for current Ubuntu - this is 16.04 LTS

  zworkstation:
    Type: String
    Default: ami-b7e93bce
    Description: AMI ID for the Windows workstation - this is Windows Server 2012 R2

## AMIs END ##

  Prefix:
    Description: Tag for all servers deployed in the Automate cluster
    Type: String
    Default: my-company

  automateLicense:
    Description: URL to Automate license key
    Type: String

  # Configuration script location
  setupScriptUrl:
    Description: Script that is responsible for configuring the Chef servers
    Type: String
    Default: https://raw.githubusercontent.com/chef-partners/arm-templates/master/solutions/nested/scripts/setup-ctl.sh

  # Automate user parameters
  userName:
    Description: User name for all the Chef components (Chef Server, Compliance, Automate)
    Type: String
    Default: chef

  userPassword:
    Description: Password for all the Chef components (Chef Server, Compliance, Automate)
    Type: String
    Default: Ch4ng3mE

  userFullname:
    Description: Full name of the Chef components user
    Type: String

  userEmailaddress:
    Description: Email address of the Chef components user
    Type: String

  chefOrg:
    Description: The organisation to create on the Chef Server, this is the shortname
    Type: String

  chefOrgDescription:
    Description: Description of the Chef organisation
    Type: String

  # Automate component version
  chefDKVersion:
    Description: Chef DK version to install on the workstation
    Type: String
    Default: 2.3.4

  chefVersion:
    Description: Chef Server version to install
    Type: String
    Default: 12.17.5

  automateVersion:
    Description: Automate Server version to install
    Type: String
    Default: 1.7.10

  # Workstation setup
  chefRepoUrl:
    Description: URL to the chefrepo.zip file that contains the cookbooks to configure the workstation
    Type: String
    Default: https://ufmnrk9rhw1k2ftk.blob.core.windows.net/automatefiles/chefrepo.zip

  spnDetails:
    Description: Details required to create the aws config file on the workstation
    Type: String


## RESOURCES SECTION ##

Resources:

  # VPC creation #
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
      - Key: Name'
        Value: !Sub ${Prefix} Automate VPC

  # Subnets #
  SubnetDefault:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-west-1b
      VpcId:
        Ref: VPC
      CidrBlock: 10.0.0.0/24
      Tags:
      - Key: Name
        Value: !Sub ${Prefix} Automate Cluster Subnet

  # IGs and access and associations #
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Sub ${Prefix} Automate Cluster IG
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Sub ${Prefix} Automate Cluster RouteTable
  Route:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId:
        Ref: RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
  SubnetRouteTableAssociationDefault:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: SubnetDefault
      RouteTableId:
        Ref: RouteTable

 # Network ACLs #
  NetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Sub ${Prefix} Automate Cluster NetworkAcl

  InboundNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NetworkAcl
      RuleNumber: '100'
      Protocol: "-1"
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
  OutBoundNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NetworkAcl
      RuleNumber: '100'
      Protocol: "-1"
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
  SubnetNetworkAclAssociationDefault:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: SubnetDefault
      NetworkAclId:
        Ref: NetworkAcl

  # Security group
  AutomateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Ref: VPC
      GroupDescription: Enable required ports for Automate cluster
      SecurityGroupIngress:

      # SSH
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp:
          Ref: SSHLocation

        # RDP
      - IpProtocol: tcp
        FromPort: '3389'
        ToPort: '3389'
        CidrIp: 0.0.0.0/0

        # HTTPS
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 0.0.0.0/0

      - IpProtocol: icmp
        FromPort: '8'
        ToPort: "-1"
        CidrIp: 0.0.0.0/0

      - IpProtocol: udp
        FromPort: '3389'
        ToPort: '3389'
        CidrIp: 0.0.0.0/0

        # WINRM
      - IpProtocol: tcp
        FromPort: '5985'
        ToPort: '5986'
        CidrIp: 0.0.0.0/0

        # Access to Etcd
      - IpProtocol: tcp
        FromPort: '4001'
        ToPort: '4001'
        CidrIp: 10.0.0.0/24

## VM CREATION ##
  orchestration:
    Type: AWS::EC2::Instance
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          sudo apt-get update
          sudo apt-get -y install docker.io
          ln -sf /usr/bin/docker.io /usr/local/bin/docker
          docker run -p 4001:4001 -p 7001:7001 --name orchestration -d elcolio/etcd

          cd /tmp
          wget ${setupScriptUrl}
          chmod u+x ./setup-ctl.sh
          ./setup-ctl.sh -m orchestration
      InstanceType: t2.medium
      AvailabilityZone: eu-west-1b
      NetworkInterfaces:
      - GroupSet:
        - Ref: AutomateSecurityGroup
        AssociatePublicIpAddress: 'true'
        PrivateIpAddress: 10.0.0.4
        DeviceIndex: '0'
        DeleteOnTermination: 'true'
        SubnetId:
          Ref: SubnetDefault
      KeyName:
        Ref: KeyName
      ImageId:
        Ref: zCurrentUbuntu
      Tags:
      - Key: Name
        Value: !Sub ${Prefix} Automate Cluster orchestration server

  chefserver:
    DependsOn: orchestration
    Type: AWS::EC2::Instance
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe

          # Get the local IP address, public DNS name and thus the hostname from user data
          LOCAL_IPV4=`curl curl http://169.254.169.254/latest/meta-data/local-ipv4 2> /dev/null`
          PUBLIC_DNSNAME=`curl http://169.254.169.254/latest/meta-data/public-hostname 2> /dev/null`
          HOSTNAME=`echo $PUBLIC_DNSNAME | cut -d. -f 1`

          # Set the hostname of the machine as well as the FQDN
          echo $HOSTNAME > /etc/hostname
          sed -i "s/^127\.0\.0\.1\s*localhost/127.0.0.1 $PUBLIC_DNSNAME $HOSTNAME/" /etc/hosts
          hostname -F /etc/hostname

          cd /tmp
          wget ${setupScriptUrl}
          chmod u+x ./setup-ctl.sh
          ./setup-ctl.sh -m chef-install,chef-configure --chef-version ${chefVersion} -u ${userName} -f "${userFullname}" -p ${userPassword} -e ${userEmailaddress} -o ${chefOrg} -d ${chefOrgDescription} -O ${orchestration.PrivateIp}:4001 -s https://$PUBLIC_DNSNAME/organizations/${chefOrg} -w
      InstanceType: c3.large
      AvailabilityZone: eu-west-1b
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            VolumeSize: '50'
            VolumeType: gp2
            DeleteOnTermination: 'true'
      NetworkInterfaces:
      - GroupSet:
        - Ref: AutomateSecurityGroup
        AssociatePublicIpAddress: 'true'
        PrivateIpAddress: 10.0.0.5
        DeviceIndex: '0'
        DeleteOnTermination: 'true'
        SubnetId:
          Ref: SubnetDefault
      KeyName:
        Ref: KeyName
      ImageId:
        Ref: zCurrentUbuntu
      Tags:
      - Key: Name
        Value: !Sub ${Prefix} Automate Cluster Chef server


  automateserver:
    DependsOn: chefserver
    Type: AWS::EC2::Instance
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe

          # Allow time for the chef server to complete
          sleep 300

          # Get the local IP address, public DNS name and thus the hostname from user data
          LOCAL_IPV4=`curl curl http://169.254.169.254/latest/meta-data/local-ipv4 2> /dev/null`
          PUBLIC_DNSNAME=`curl http://169.254.169.254/latest/meta-data/public-hostname 2> /dev/null`
          HOSTNAME=`echo $PUBLIC_DNSNAME | cut -d. -f 1`

          # Set the hostname of the machine as well as the FQDN
          echo $HOSTNAME > /etc/hostname
          sed -i "s/^127\.0\.0\.1\s*localhost/127.0.0.1 $PUBLIC_DNSNAME $HOSTNAME/" /etc/hosts
          hostname -F /etc/hostname

          cd /tmp

          # Download the license key
          wget ${automateLicense}

          wget ${setupScriptUrl}
          chmod u+x ./setup-ctl.sh
          ./setup-ctl.sh -m automate-install,automate-configure --automate-version ${automateVersion} -O ${orchestration.PrivateIp}:4001 -l /tmp/automate.license -s https://${chefserver.PublicDnsName}/organizations/${chefOrg} -u ${userName} -f "${userFullname}" -p ${userPassword} -e ${userEmailaddress}
      InstanceType: c3.xlarge
      AvailabilityZone: eu-west-1b
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            VolumeSize: '50'
            VolumeType: gp2
            DeleteOnTermination: 'true'
      NetworkInterfaces:
      - GroupSet:
        - Ref: AutomateSecurityGroup
        AssociatePublicIpAddress: 'true'
        PrivateIpAddress: 10.0.0.6
        DeviceIndex: '0'
        DeleteOnTermination: 'true'
        SubnetId:
          Ref: SubnetDefault
      KeyName:
        Ref: KeyName
      ImageId:
        Ref: zCurrentUbuntu
      Tags:
      - Key: Name
        Value: !Sub ${Prefix} Automate Cluster Automate server

  workstation:
    DependsOn: chefserver
    Type: AWS::EC2::Instance
    Properties:
      UserData:
        Fn::Base64: !Sub |
          <powershell>
            $admin = [adsi]("WinNT://./Administrator, user")
            $admin.psbase.invoke("SetPassword", "Cod3Can!")
            winrm qc -q
            winrm set winrm/config '@{MaxTimeoutms="1800000"}'
            winrm set winrm/config/service '@{AllowUnencrypted="true"}'
            winrm set winrm/config/service/auth '@{Basic="true"}'
            Set-Item wsman:localhost\client\trustedhosts -value * -force
            Get-NetFirewallProfile | Set-NetFirewallProfile -Enabled False
            net stop winrm
            sc.exe config winrm start=auto
            net start winrm
            $scriptURL = "https://raw.githubusercontent.com/chef-partners/arm-templates/master/solutions/nested/scripts/windows-workstation.ps1"
            $outFile = "c:\bootstrap.ps1"
            Invoke-WebRequest $scriptURL -OutFile $outFile
            c:\bootstrap.ps1 -operation "chefdk,chefrepo,chefclient" -chefdk_version ${chefDKVersion} -chef_repo_url "${chefRepoUrl}" -chef_org "${chefOrg}" -chef_server_url "https://${chefserver.PublicDnsName}/organizations/${chefOrg}" -chef_user "${userName}" -windows_user "Administrator" -windows_password "Cod3Can!" -automateServerFQDN "${automateserver.PublicDnsName}" -automateServerUrl "https://${automateserver.PublicDnsName}/" > windows-workstation.log
          </powershell>
      InstanceType: m4.large
      AvailabilityZone: eu-west-1b
      BlockDeviceMappings:
      - DeviceName: "/dev/sda1"
        Ebs:
          VolumeSize: '50'
          VolumeType: io1
          Iops: '2000'
          DeleteOnTermination: 'true'
      NetworkInterfaces:
      - GroupSet:
        - Ref: AutomateSecurityGroup
        AssociatePublicIpAddress: 'true'
        PrivateIpAddress: 10.0.0.8
        DeviceIndex: '0'
        DeleteOnTermination: 'true'
        SubnetId:
          Ref: SubnetDefault
      KeyName:
        Ref: KeyName
      ImageId:
        Ref: zworkstation
      Tags:
      - Key: Name
        Value: !Sub ${Prefix} Automate Cluster workstation

## OUTPUTS ##

Outputs:

  workstationPubDNS:
    Description: Public DNS of the workstation
    Value:
      Fn::GetAtt:
      - workstation
      - PublicDnsName

  chefserverPubDNS:
    Description: Public DNS of the Chef Server
    Value:
      Fn::GetAtt:
      - chefserver
      - PublicDnsName

  automateserverPubDNS:
    Description: Public DNS of the Automate Server
    Value:
      Fn::GetAtt:
      - automateserver
      - PublicDnsName
